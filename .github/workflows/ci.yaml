# This runs checks to verify if code is properly formatted and that tests (unit and integration against a mocked environment) are passing.
name: Lint & Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'build_deploy.sh'
      - '.github/*.md'
      - '.github/CODEOWNERS'
      - 'templates/**'
      - 'docs/**'

  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '*.md'
      - 'build_deploy.sh'
      - '.github/*.md'
      - '.github/workflows/openapi_update.yaml'
      - '.github/CODEOWNERS'
      - 'templates/**'
      - '.openapi-generator-ignore'
      - 'docs/**'

env:
  # set ocm env to integration
  OCM_ENV: integration
  # GORM env variables. These values are defined in the postgres service definition above
  GORM_DIALECT: postgres
  GORM_HOST: 127.0.0.1
  GORM_PORT: 5432
  GORM_NAME: serviceapitests
  GORM_USERNAME: cos_fleet_manager
  GORM_PASSWORD: foobar-bizz-buzz
  GORM_SSLMODE: disable
  GORM_DEBUG: false
  # Dummy MAS SSO variables
  MAS_SSO_CLIENT_ID: ${{ secrets.MAS_SSO_CLIENT_ID }}
  MAS_SSO_CLIENT_SECRET: ${{ secrets.MAS_SSO_CLIENT_SECRET }}
  OSD_IDP_MAS_SSO_CLIENT_ID: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_ID }}
  OSD_IDP_MAS_SSO_CLIENT_SECRET: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_SECRET }}
  # Dummy AWS credentials 
  AWS_ACCOUNT_ID: aws_accountid
  AWS_ACCESS_KEY: aws_accesskey
  AWS_SECRET_ACCESS_KEY: aws_secretaccesskey
  ROUTE53_ACCESS_KEY: aws_route53_access_key
  ROUTE53_SECRET_ACCESS_KEY: aws_route53_secret_access_key
  # Dummy Kafka TLS env variables
  KAFKA_TLS_CERT: kafka_tls_cert
  KAFKA_TLS_KEY: kafka_tls_key
  # So that OCM secrets are initialised
  DOCKER_PR_CHECK: true
  TEST_TIMEOUT: 30m
  # private module path prefixes
  GOPRIVATE: github.com/bf2fc6cc711aee1a0c2a/*

jobs:
  lint-test:
    name: "Lint & Test"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: foobar-bizz-buzz
          POSTGRES_USER: cos-fleet-manager
          POSTGRES_DB: cos-fleet-manager
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
     
    steps:
      - name: Cancel Previous Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://bf2robot:${TOKEN}@github.com".insteadOf "https://github.com"
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run Migration Script
        run: make db/migrate
      - name: Setup tests secrets
        run: |
          make ocm/setup aws/setup keycloak/setup
      - name: Lint & Test
        run: |
          export GOPATH=$(go env GOPATH)
          export PATH=${PATH}:$GOPATH/bin
          make verify binary test test/integration
      - name: Build and publish image to quay.io
        if: github.event_name == 'push'
        env:
          QUAY_USER_NAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_USER_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
          QUAY_ORG_NAME: ${{ secrets.QUAY_ORG_NAME }}
        run: |
          chmod +x ./build_deploy.sh
          ./build_deploy.sh
