# This runs checks to verify if code is properly formatted and that tests (unit and integration against a mocked environment) are passing.
name: Lint & Test / Build & Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '*.md'
      - '.github/*.md'
      - '.github/workflows/bump_*.yaml'
      - '.github/CODEOWNERS'
      - '.openapi-generator-ignore'
      - 'docs/**'
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - '.github/*.md'
      - '.github/workflows/bump_*.yaml'
      - '.github/CODEOWNERS'
      - '.openapi-generator-ignore'
      - 'docs/**'
env:
  # set ocm env to integration
  OCM_ENV: integration
  # GORM env variables. These values are defined in the postgres service definition above
  GORM_DIALECT: postgres
  GORM_HOST: 127.0.0.1
  GORM_PORT: 5432
  GORM_NAME: serviceapitests
  GORM_USERNAME: cos_fleet_manager
  GORM_PASSWORD: foobar-bizz-buzz
  GORM_SSLMODE: disable
  GORM_DEBUG: false
  # Dummy MAS SSO variables
  MAS_SSO_CLIENT_ID: ${{ secrets.MAS_SSO_CLIENT_ID }}
  MAS_SSO_CLIENT_SECRET: ${{ secrets.MAS_SSO_CLIENT_SECRET }}
  SSO_CLIENT_ID: ${{ secrets.SSO_CLIENT_ID }}
  SSO_CLIENT_SECRET: ${{ secrets.SSO_CLIENT_SECRET }}
  OSD_IDP_MAS_SSO_CLIENT_ID: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_ID }}
  OSD_IDP_MAS_SSO_CLIENT_SECRET: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_SECRET }}
  # Dummy AWS credentials 
  AWS_ACCOUNT_ID: aws_accountid
  AWS_ACCESS_KEY: aws_accesskey
  AWS_SECRET_ACCESS_KEY: aws_secretaccesskey
  ROUTE53_ACCESS_KEY: aws_route53_access_key
  ROUTE53_SECRET_ACCESS_KEY: aws_route53_secret_access_key
  # Dummy Kafka TLS env variables
  KAFKA_TLS_CERT: kafka_tls_cert
  KAFKA_TLS_KEY: kafka_tls_key
  # So that OCM secrets are initialised
  DOCKER_PR_CHECK: true
  TEST_TIMEOUT: 30m

jobs:
  lint-test:
    name: "Lint & Test / Build & Deploy"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: foobar-bizz-buzz
          POSTGRES_USER: cos-fleet-manager
          POSTGRES_DB: cos-fleet-manager
        ports:
          - 5433:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
     
    steps:
      - name: Cancel Previous Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          TOKEN_USER: ${{ secrets.PERSONAL_ACCESS_TOKEN_USER }}
        run: |
          git config --global url."https://${TOKEN_USER}:${TOKEN}@github.com".insteadOf "https://github.com"
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Cache go module
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run Migration Script
        run: make db/migrate
      - name: Setup tests secrets
        run: |
          make ocm/setup aws/setup keycloak/setup redhatsso/setup
      - name: Lint & Test
        run: |
          export GOPATH=$(go env GOPATH)
          export PATH=${PATH}:$GOPATH/bin
          make verify binary test test/integration
      - name: Build and publish image to quay.io
        if: github.event_name == 'push'
        env:
          QUAY_USER_NAME: ${{secrets.IMAGE_REPO_USERNAME}}
          QUAY_USER_PASSWORD: ${{ secrets.IMAGE_REPO_PASSWORD }}
          QUAY_ORG_NAME: ${{secrets.IMAGE_REPO_NAMESPACE}}
        run: |
          chmod +x ./build_deploy.sh
          ./build_deploy.sh
      - name: Log in and set context
        if: github.event_name == 'push'
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.K8S_CLUSTER_DEV }}
          openshift_token: ${{ secrets.K8S_CLUSTER_DEV_TOKEN }}
          insecure_skip_tls_verify: false
          namespace: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
      - name: Deploy to DEV OCP cluster
        if: github.event_name == 'push'
        env:
          IMAGE_REPOSITORY: "${{ secrets.IMAGE_REPO_NAMESPACE }}/cos-fleet-manager"
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          IMAGE_REGISTRY: "quay.io"
          NAMESPACE: ${{ secrets.K8S_CLUSTER_DEV_NAMESPACE }}
          MAS_SSO_CLIENT_ID: ${{ secrets.MAS_SSO_CLIENT_ID }}
          MAS_SSO_CLIENT_SECRET: ${{ secrets.MAS_SSO_CLIENT_SECRET }}
          SSO_CLIENT_ID: ${{ secrets.SSO_CLIENT_ID }}
          SSO_CLIENT_SECRET: ${{ secrets.SSO_CLIENT_SECRET }}
          MAS_SSO_CRT: ${{ secrets.MAS_SSO_CRT }}
          OCM_SERVICE_TOKEN: ${{ secrets.OCM_SERVICE_TOKEN }}
          VAULT_KIND: "aws"
          VAULT_SECRET_PREFIX_ENABLE: "false"
          VAULT_SECRET_PREFIX: "managed-connectors"
          VAULT_ACCESS_KEY: ${{ secrets.VAULT_ACCESS_KEY }}
          VAULT_SECRET_ACCESS_KEY: ${{ secrets.VAULT_SECRET_ACCESS_KEY }}
          SERVICE_PUBLIC_HOST_URL: ${{ secrets.SERVICE_PUBLIC_HOST_URL }}
          CONNECTOR_EVAL_ORGANIZATIONS: ${{ secrets.CONNECTOR_EVAL_ORGANIZATIONS }}
          CONNECTOR_ENABLE_UNASSIGNED_CONNECTORS: ${{ secrets.CONNECTOR_ENABLE_UNASSIGNED_CONNECTORS }}
          CONNECTOR_EVAL_DURATION: ${{ secrets.CONNECTOR_EVAL_DURATION }}
          CONNECTOR_NAMESPACE_LIFECYCLE_API: ${{ secrets.CONNECTOR_NAMESPACE_LIFECYCLE_API }}
          CONNECTORS_EVAL_NAMESPACE_QUOTA_PROFILE: ${{ secrets.CONNECTORS_EVAL_NAMESPACE_QUOTA_PROFILE }}
        run: |
          make deploy
          oc rollout restart deployment/cos-fleet-manager
